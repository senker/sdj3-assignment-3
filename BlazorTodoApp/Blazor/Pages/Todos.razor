@page "/Todos"
@using Domain
@using Domain.Contracts
@inject ITodoHome TodoHome

<h3>Todos</h3>

<div class="filterbar">
    <div class="filterscontainer">
        <img src="img/@(doShowFilters?"clear_" : "")funnel.png" class="funnel" @onclick="OpenCloseFilters"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <div>
                    <label>Owner ID:</label>
                </div>
                <div>
                    <input type="number" class="owneridfield" @oninput="args => UpdateOwnerFilter(args)" min="0"/>
                </div>
            </div>
            <div class="filter">
                <div>
                    <label style="text-align: center">Is completed?</label>
                </div>
                <div>
                    <select class="completedstatusfield" @onchange="args => UpdateCompletedStatusFilter(args)">
                        <option value="all">all</option>
                        <option value="true">true</option>
                        <option value="false">false</option>
                    </select>
                </div>
            </div>
        }
    </div>
</div>

@if (allTodos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allTodos.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Owner ID</th> <th>Todo ID</th> <th>Title</th> <th>Completed?</th> <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todosToShow)
        {
            <tr>
                <td>@item.OwnerId</td> 
                <td>@item.Id</td> 
                <td>@item.Title</td> 
                <td>
                    <label class="switch">
                        <input type ="checkbox" checked="@item.IsCompleted" @onchange="@((arg) => ToggleStatus((bool)arg.Value, item))">
                        <span class="slider round"></span>
                    </label>
                </td>
                <td>
                    
                    <label
                        @onclick="@(() => RemoveTodo(item.Id))"
                        style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(errorLabel))
{
    <label style="color: red">@errorLabel</label>
}

@code {
    private ICollection<Todo> allTodos, todosToShow;
    private string errorLabel;

    private int? ownerIdFilter;
    private bool? isCompletedFilter;
    private bool doShowFilters;

    protected override async Task OnInitializedAsync()
    {
        allTodos = await TodoHome.GetAsync();
        todosToShow = allTodos;
    }

    private async Task RemoveTodo(int id)
    {
        errorLabel = "";
        try
        {
            Todo todoToRemove = allTodos.First(todo => todo.Id == id);
            await TodoHome.DeleteAsync(id);
            allTodos.Remove(todoToRemove);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    private async Task ToggleStatus(bool status, Todo todo)
    {
        errorLabel = "";
        todo.IsCompleted = status;
        try
        {
            await TodoHome.UpdateAsync(todo);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    private void OpenCloseFilters()
    {
        doShowFilters = !doShowFilters;
        if (!doShowFilters)
        {
            ownerIdFilter = null;
            isCompletedFilter = null;
            todosToShow = allTodos;
        }
    }

    private void UpdateOwnerFilter(ChangeEventArgs args)
    {
        string value = (string)args.Value;
        if (string.IsNullOrEmpty(value))
        {
            ownerIdFilter = null;
            ApplyFilters();
            return;
        }
        int idFilter = int.Parse(value);
        if (idFilter < 0)
        {
            return;
        }
        
        ownerIdFilter = idFilter;
        ApplyFilters();
    }

    private void UpdateCompletedStatusFilter(ChangeEventArgs args)
    {
        string value = (string)args.Value;

        try
        {
            isCompletedFilter = bool.Parse(value);
        }
        catch (Exception e)
        {
            isCompletedFilter = null;
        }
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        todosToShow = allTodos;
        if (isCompletedFilter != null)
        {
            todosToShow = todosToShow.Where(todo => todo.IsCompleted == isCompletedFilter).ToList();
        }
        if (ownerIdFilter != null)
        {
            todosToShow = todosToShow.Where(todo => todo.OwnerId == ownerIdFilter).ToList();
        }
    }
}